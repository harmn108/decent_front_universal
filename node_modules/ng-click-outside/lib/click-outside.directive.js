"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var ClickOutsideDirective = (function () {
    function ClickOutsideDirective(_el) {
        this._el = _el;
        this.attachOutsideOnClick = false;
        this.exclude = '';
        this.excludeBeforeClick = false;
        this.clickOutsideEvents = '';
        this.clickOutside = new core_1.EventEmitter();
        this._nodesExcluded = [];
        this._events = ['click'];
        this._isBrowser = new Function('try{return this===window;}catch(e){return false;}')();
        this._initOnClickBody = this._initOnClickBody.bind(this);
        this._onClickBody = this._onClickBody.bind(this);
    }
    ClickOutsideDirective.prototype.ngOnInit = function () {
        if (!this._isBrowser) {
            return;
        }
        this._init();
    };
    ClickOutsideDirective.prototype.ngOnDestroy = function () {
        var _this = this;
        if (!this._isBrowser) {
            return;
        }
        if (this.attachOutsideOnClick) {
            this._events.forEach(function (e) { return _this._el.nativeElement.removeEventListener(e, _this._initOnClickBody); });
        }
        this._events.forEach(function (e) { return document.body.removeEventListener(e, _this._onClickBody); });
    };
    ClickOutsideDirective.prototype.ngOnChanges = function (changes) {
        if (!this._isBrowser) {
            return;
        }
        if (changes['attachOutsideOnClick'] || changes['exclude']) {
            this._init();
        }
    };
    ClickOutsideDirective.prototype._init = function () {
        var _this = this;
        if (this.clickOutsideEvents !== '') {
            this._events = this.clickOutsideEvents.split(' ');
        }
        this._excludeCheck();
        if (this.attachOutsideOnClick) {
            this._events.forEach(function (e) { return _this._el.nativeElement.addEventListener(e, _this._initOnClickBody); });
        }
        else {
            this._initOnClickBody();
        }
    };
    ClickOutsideDirective.prototype._initOnClickBody = function () {
        var _this = this;
        this._events.forEach(function (e) { return document.body.addEventListener(e, _this._onClickBody); });
    };
    ClickOutsideDirective.prototype._excludeCheck = function () {
        if (this.exclude) {
            try {
                var nodes = Array.from(document.querySelectorAll(this.exclude));
                if (nodes) {
                    this._nodesExcluded = nodes;
                }
            }
            catch (err) {
                console.error('[ng-click-outside] Check your exclude selector syntax.', err);
            }
        }
    };
    ClickOutsideDirective.prototype._onClickBody = function (ev) {
        var _this = this;
        if (this.excludeBeforeClick) {
            this._excludeCheck();
        }
        if (!this._el.nativeElement.contains(ev.target) && !this._shouldExclude(ev.target)) {
            this.clickOutside.emit(ev);
            if (this.attachOutsideOnClick) {
                this._events.forEach(function (e) { return document.body.removeEventListener(e, _this._onClickBody); });
            }
        }
    };
    ClickOutsideDirective.prototype._shouldExclude = function (target) {
        for (var i = 0; i < this._nodesExcluded.length; i++) {
            if (this._nodesExcluded[i].contains(target)) {
                return true;
            }
        }
        return false;
    };
    return ClickOutsideDirective;
}());
ClickOutsideDirective.decorators = [
    { type: core_1.Directive, args: [{ selector: '[clickOutside]' },] },
];
/** @nocollapse */
ClickOutsideDirective.ctorParameters = function () { return [
    { type: core_1.ElementRef, },
]; };
ClickOutsideDirective.propDecorators = {
    'attachOutsideOnClick': [{ type: core_1.Input },],
    'exclude': [{ type: core_1.Input },],
    'excludeBeforeClick': [{ type: core_1.Input },],
    'clickOutsideEvents': [{ type: core_1.Input },],
    'clickOutside': [{ type: core_1.Output },],
};
exports.ClickOutsideDirective = ClickOutsideDirective;
