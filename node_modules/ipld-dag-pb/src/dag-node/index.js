'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var mh = require('multihashes');
var assert = require('assert');

var DAGNode = function () {
  function DAGNode(data, links, serialized, multihash) {
    _classCallCheck(this, DAGNode);

    assert(serialized, 'DAGNode needs its serialized format');
    assert(multihash, 'DAGNode needs its multihash');

    if (typeof multihash === 'string') {
      multihash = mh.fromB58String(multihash);
    }

    this._data = data || new Buffer(0);
    this._links = links || [];
    this._serialized = serialized;
    this._multihash = multihash;

    this._size = this.links.reduce(function (sum, l) {
      return sum + l.size;
    }, this.serialized.length);

    this._json = {
      data: this.data,
      links: this.links.map(function (l) {
        return l.toJSON();
      }),
      multihash: mh.toB58String(this.multihash),
      size: this.size
    };
  }

  _createClass(DAGNode, [{
    key: 'toJSON',
    value: function toJSON() {
      return this._json;
    }
  }, {
    key: 'toString',
    value: function toString() {
      var mhStr = mh.toB58String(this.multihash);
      return 'DAGNode <' + mhStr + ' - data: "' + this.data.toString() + '", links: ' + this.links.length + ', size: ' + this.size + '>';
    }
  }, {
    key: 'data',
    get: function get() {
      return this._data;
    },
    set: function set(data) {
      throw new Error("Can't set property: 'data' is immutable");
    }
  }, {
    key: 'links',
    get: function get() {
      return this._links;
    },
    set: function set(links) {
      throw new Error("Can't set property: 'links' is immutable");
    }
  }, {
    key: 'serialized',
    get: function get() {
      return this._serialized;
    },
    set: function set(serialized) {
      throw new Error("Can't set property: 'serialized' is immutable");
    }
  }, {
    key: 'size',
    get: function get() {
      return this._size;
    },
    set: function set(size) {
      throw new Error("Can't set property: 'size' is immutable");
    }
  }, {
    key: 'multihash',
    get: function get() {
      return this._multihash;
    },
    set: function set(multihash) {
      throw new Error("Can't set property: 'multihash' is immutable");
    }
  }]);

  return DAGNode;
}();

exports = module.exports = DAGNode;
exports.create = require('./create');
exports.clone = require('./clone');
exports.addLink = require('./addLink');
exports.rmLink = require('./rmLink');