'use strict';

var multihashing = require('multihashing-async');
var sort = require('stable');
var dagPBUtil = require('../util.js');
var serialize = dagPBUtil.serialize;
var dagNodeUtil = require('./util.js');
var linkSort = dagNodeUtil.linkSort;
var DAGNode = require('./index.js');
var DAGLink = require('./../dag-link');

function create(data, dagLinks, hashAlg, callback) {
  if (typeof data === 'function') {
    callback = data;
    data = undefined;
  } else if (typeof data === 'string') {
    data = new Buffer(data);
  }
  if (typeof dagLinks === 'function') {
    callback = dagLinks;
    dagLinks = [];
  }
  if (typeof hashAlg === 'function') {
    callback = hashAlg;
    hashAlg = undefined;
  }

  if (!Buffer.isBuffer(data)) {
    return callback('Passed \'data\' is not a buffer or a string!');
  }

  if (!hashAlg) {
    hashAlg = 'sha2-256';
  }

  var links = dagLinks.map(function (l) {
    if (l.constructor && l.constructor.name === 'DAGLink') {
      return l;
    }

    return new DAGLink(l.name ? l.name : l.Name, l.size ? l.size : l.Size, l.hash || l.Hash || l.multihash);
  });
  var sortedLinks = sort(links, linkSort);

  serialize({
    data: data,
    links: sortedLinks
  }, function (err, serialized) {
    if (err) {
      return callback(err);
    }
    multihashing(serialized, hashAlg, function (err, multihash) {
      if (err) {
        return callback(err);
      }
      var dagNode = new DAGNode(data, sortedLinks, serialized, multihash);
      callback(null, dagNode);
    });
  });
}

module.exports = create;