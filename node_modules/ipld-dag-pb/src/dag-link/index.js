'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var mh = require('multihashes');
var assert = require('assert');

// Link represents an IPFS Merkle DAG Link between Nodes.

var DAGLink = function () {
  function DAGLink(name, size, multihash) {
    _classCallCheck(this, DAGLink);

    assert(multihash, 'A link requires a multihash to point to');
    assert(size, 'A link requires a size');

    this._name = name;
    this._size = size;

    if (typeof multihash === 'string') {
      this._multihash = mh.fromB58String(multihash);
    } else if (Buffer.isBuffer(multihash)) {
      this._multihash = multihash;
    }
  }

  _createClass(DAGLink, [{
    key: 'toString',
    value: function toString() {
      var mhStr = mh.toB58String(this.multihash);
      return 'DAGLink <' + mhStr + ' - name: "' + this.name + '", size: ' + this.size + '>';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        name: this.name,
        size: this.size,
        multihash: mh.toB58String(this._multihash)
      };
    }
  }, {
    key: 'name',
    get: function get() {
      return this._name;
    },
    set: function set(name) {
      throw new Error("Can't set property: 'name' is immutable");
    }
  }, {
    key: 'size',
    get: function get() {
      return this._size;
    },
    set: function set(size) {
      throw new Error("Can't set property: 'size' is immutable");
    }
  }, {
    key: 'multihash',
    get: function get() {
      return this._multihash;
    },
    set: function set(multihash) {
      throw new Error("Can't set property: 'multihash' is immutable");
    }
  }]);

  return DAGLink;
}();

exports = module.exports = DAGLink;
exports.create = require('./create');