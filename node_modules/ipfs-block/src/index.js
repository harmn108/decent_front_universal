'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CID = require('cids');

/**
 * Represents an immutable block of data that is uniquely referenced with a cid.
 *
 * @constructor
 * @param {Buffer} data - The data to be stored in the block as a buffer.
 * @param {CID} cid - The cid of the data
 *
 * @example
 * const block = new Block(new Buffer('a012d83b20f9371...'))
 */

var Block = function () {
  function Block(data, cid) {
    _classCallCheck(this, Block);

    if (!data || !Buffer.isBuffer(data)) {
      throw new Error('first argument  must be a buffer');
    }

    if (!cid || !CID.isCID(cid)) {
      throw new Error('second argument must be a CID');
    }

    this._data = data;
    this._cid = cid;
  }

  /**
   * The data of this block.
   *
   * @type {Buffer}
   */


  _createClass(Block, [{
    key: 'data',
    get: function get() {
      return this._data;
    },
    set: function set(val) {
      throw new Error('Tried to change an immutable block');
    }

    /**
     * The cid of the data this block represents.
     *
     * @type {CID}
     */

  }, {
    key: 'cid',
    get: function get() {
      return this._cid;
    },
    set: function set(val) {
      throw new Error('Tried to change an immutable block');
    }

    /**
     * Check if the given value is a Block.
     *
     * @param {any} other
     * @returns {bool}
     */

  }], [{
    key: 'isBlock',
    value: function isBlock(other) {
      return other && other.constructor.name === 'Block';
    }
  }]);

  return Block;
}();

module.exports = Block;