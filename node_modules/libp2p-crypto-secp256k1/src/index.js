'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var multihashing = require('multihashing-async');
var crypto = require('./crypto');
var pbm = require('libp2p-crypto').protobuf;

var Secp256k1PublicKey = function () {
  function Secp256k1PublicKey(key) {
    _classCallCheck(this, Secp256k1PublicKey);

    crypto.validatePublicKey(key);
    this._key = key;
  }

  _createClass(Secp256k1PublicKey, [{
    key: 'verify',
    value: function verify(data, sig, callback) {
      ensure(callback);
      crypto.hashAndVerify(this._key, sig, data, callback);
    }
  }, {
    key: 'marshal',
    value: function marshal() {
      return crypto.compressPublicKey(this._key);
    }
  }, {
    key: 'equals',
    value: function equals(key) {
      return this.bytes.equals(key.bytes);
    }
  }, {
    key: 'hash',
    value: function hash(callback) {
      ensure(callback);
      multihashing(this.bytes, 'sha2-256', callback);
    }
  }, {
    key: 'bytes',
    get: function get() {
      return pbm.PublicKey.encode({
        Type: pbm.KeyType.Secp256k1,
        Data: this.marshal()
      });
    }
  }]);

  return Secp256k1PublicKey;
}();

var Secp256k1PrivateKey = function () {
  function Secp256k1PrivateKey(key, publicKey) {
    _classCallCheck(this, Secp256k1PrivateKey);

    this._key = key;
    this._publicKey = publicKey || crypto.computePublicKey(key);
    crypto.validatePrivateKey(this._key);
    crypto.validatePublicKey(this._publicKey);
  }

  _createClass(Secp256k1PrivateKey, [{
    key: 'sign',
    value: function sign(message, callback) {
      ensure(callback);
      crypto.hashAndSign(this._key, message, callback);
    }
  }, {
    key: 'marshal',
    value: function marshal() {
      return this._key;
    }
  }, {
    key: 'equals',
    value: function equals(key) {
      return this.bytes.equals(key.bytes);
    }
  }, {
    key: 'hash',
    value: function hash(callback) {
      ensure(callback);
      multihashing(this.bytes, 'sha2-256', callback);
    }
  }, {
    key: 'public',
    get: function get() {
      return new Secp256k1PublicKey(this._publicKey);
    }
  }, {
    key: 'bytes',
    get: function get() {
      return pbm.PrivateKey.encode({
        Type: pbm.KeyType.Secp256k1,
        Data: this.marshal()
      });
    }
  }]);

  return Secp256k1PrivateKey;
}();

function unmarshalSecp256k1PrivateKey(bytes, callback) {
  callback(null, new Secp256k1PrivateKey(bytes), null);
}

function unmarshalSecp256k1PublicKey(bytes) {
  return new Secp256k1PublicKey(bytes);
}

function generateKeyPair(_bits, cb) {
  if (cb === undefined && typeof _bits === 'function') {
    cb = _bits;
  }
  ensure(cb);

  crypto.generateKey(function (err, privateKeyBytes) {
    if (err) {
      return cb(err);
    }
    var privkey = void 0;
    try {
      privkey = new Secp256k1PrivateKey(privateKeyBytes);
    } catch (err) {
      cb(err);
      return;
    }

    cb(null, privkey);
  });
}

function ensure(cb) {
  if (typeof cb !== 'function') {
    throw new Error('callback is required');
  }
}

module.exports = {
  Secp256k1PublicKey: Secp256k1PublicKey,
  Secp256k1PrivateKey: Secp256k1PrivateKey,
  unmarshalSecp256k1PrivateKey: unmarshalSecp256k1PrivateKey,
  unmarshalSecp256k1PublicKey: unmarshalSecp256k1PublicKey,
  generateKeyPair: generateKeyPair
};