'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var pump = require('pump');
var TransformStream = require('readable-stream').Transform;
var _streamToValue = require('./stream-to-value');
var getDagNode = require('./get-dagnode');

/*
  Transforms a stream of {Name, Hash} objects to include size
  of the DAG object.

  Usage: inputStream.pipe(DAGNodeStream({ send: send }))

  Input object format:
  {
    Name: '/path/to/file/foo.txt',
    Hash: 'Qma4hjFTnCasJ8PVp3mZbZK5g2vGDT4LByLJ7m8ciyRFZP'
  }

  Output object format:
  {
    path: '/path/to/file/foo.txt',
    hash: 'Qma4hjFTnCasJ8PVp3mZbZK5g2vGDT4LByLJ7m8ciyRFZP',
    size: 20
  }
*/

var DAGNodeStream = function (_TransformStream) {
  _inherits(DAGNodeStream, _TransformStream);

  function DAGNodeStream(options) {
    _classCallCheck(this, DAGNodeStream);

    var opts = Object.assign(options || {}, { objectMode: true });

    var _this = _possibleConstructorReturn(this, (DAGNodeStream.__proto__ || Object.getPrototypeOf(DAGNodeStream)).call(this, opts));

    _this._send = opts.send;
    return _this;
  }

  _createClass(DAGNodeStream, [{
    key: '_transform',
    value: function _transform(obj, enc, callback) {
      var _this2 = this;

      getDagNode(this._send, obj.Hash, function (err, node) {
        if (err) {
          return callback(err);
        }

        var result = {
          path: obj.Name,
          hash: obj.Hash,
          size: node.size
        };

        _this2.push(result);
        callback(null);
      });
    }
  }], [{
    key: 'streamToValue',
    value: function streamToValue(send, inputStream, callback) {
      var outputStream = pump(inputStream, new DAGNodeStream({ send: send }), function (err) {
        if (err) {
          callback(err);
        }
      });
      _streamToValue(outputStream, callback);
    }
  }]);

  return DAGNodeStream;
}(TransformStream);

module.exports = DAGNodeStream;