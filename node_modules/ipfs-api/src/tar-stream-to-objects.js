'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var pump = require('pump');
var tar = require('tar-stream');
var ReadableStream = require('readable-stream').Readable;

var ObjectsStreams = function (_ReadableStream) {
  _inherits(ObjectsStreams, _ReadableStream);

  function ObjectsStreams(options) {
    _classCallCheck(this, ObjectsStreams);

    var opts = Object.assign(options || {}, { objectMode: true });
    return _possibleConstructorReturn(this, (ObjectsStreams.__proto__ || Object.getPrototypeOf(ObjectsStreams)).call(this, opts));
  }

  _createClass(ObjectsStreams, [{
    key: '_read',
    value: function _read() {}
  }]);

  return ObjectsStreams;
}(ReadableStream);

/*
  Transform a tar stream into a stream of objects:

  Output format:
  { path: 'string', content: Stream<Readable> }
*/


var TarStreamToObjects = function TarStreamToObjects(inputStream, callback) {
  var outputStream = new ObjectsStreams();
  var extractStream = tar.extract();

  extractStream.on('entry', function (header, stream, next) {
    stream.on('end', next);

    if (header.type !== 'directory') {
      outputStream.push({
        path: header.name,
        content: stream
      });
    } else {
      outputStream.push({
        path: header.name
      });
      stream.resume();
    }
  }).on('finish', function () {
    return outputStream.push(null);
  });

  pump(inputStream, extractStream);
  callback(null, outputStream);
};

module.exports = TarStreamToObjects;