'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TransformStream = require('readable-stream').Transform;
var PubsubMessage = require('./pubsub-message-utils');

var PubsubMessageStream = function (_TransformStream) {
  _inherits(PubsubMessageStream, _TransformStream);

  function PubsubMessageStream(options) {
    _classCallCheck(this, PubsubMessageStream);

    var opts = Object.assign(options || {}, { objectMode: true });
    return _possibleConstructorReturn(this, (PubsubMessageStream.__proto__ || Object.getPrototypeOf(PubsubMessageStream)).call(this, opts));
  }

  _createClass(PubsubMessageStream, [{
    key: '_transform',
    value: function _transform(obj, enc, callback) {
      var msg = void 0;
      try {
        msg = PubsubMessage.deserialize(obj, 'base64');
      } catch (err) {
        // Not a valid pubsub message
        // go-ipfs returns '{}' as the very first object atm, we skip that
        return callback();
      }

      this.push(msg);
      callback();
    }
  }], [{
    key: 'from',
    value: function from(inputStream, callback) {
      var outputStream = inputStream.pipe(new PubsubMessageStream());
      inputStream.on('end', function () {
        return outputStream.emit('end');
      });
      callback(null, outputStream);
    }
  }]);

  return PubsubMessageStream;
}(TransformStream);

module.exports = PubsubMessageStream;