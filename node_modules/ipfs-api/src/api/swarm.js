'use strict';

var promisify = require('promisify-es6');
var multiaddr = require('multiaddr');
var PeerId = require('peer-id');
var PeerInfo = require('peer-info');

module.exports = function (send) {
  return {
    peers: promisify(function (opts, callback) {
      if (typeof opts === 'function') {
        callback = opts;
        opts = {};
      }

      var verbose = opts.v || opts.verbose;

      send({
        path: 'swarm/peers',
        qs: opts
      }, function (err, result) {
        if (err) {
          return callback(err);
        }

        if (result.Strings) {
          // go-ipfs <= 0.4.4
          callback(null, result.Strings.map(function (p) {
            var res = {};

            if (verbose) {
              var parts = p.split(' ');
              res.addr = multiaddr(parts[0]);
              res.latency = parts[1];
            } else {
              res.addr = multiaddr(p);
            }

            res.peer = PeerId.createFromB58String(res.addr.decapsulate('ipfs'));

            return res;
          }));
        } else if (result.Peers) {
          // go-ipfs >= 0.4.5
          callback(null, result.Peers.map(function (p) {
            var res = {
              addr: multiaddr(p.Addr),
              peer: PeerId.createFromB58String(p.Peer),
              muxer: p.Muxer
            };

            if (p.Latency) {
              res.latency = p.Latency;
            }

            if (p.Streams) {
              res.streams = p.Streams;
            }

            return res;
          }));
        }
      });
    }),
    connect: promisify(function (args, opts, callback) {
      if (typeof opts === 'function') {
        callback = opts;
        opts = {};
      }
      send({
        path: 'swarm/connect',
        args: args,
        qs: opts
      }, callback);
    }),
    disconnect: promisify(function (args, opts, callback) {
      if (typeof opts === 'function') {
        callback = opts;
        opts = {};
      }
      send({
        path: 'swarm/disconnect',
        args: args,
        qs: opts
      }, callback);
    }),
    addrs: promisify(function (opts, callback) {
      if (typeof opts === 'function') {
        callback = opts;
        opts = {};
      }
      send({
        path: 'swarm/addrs',
        qs: opts
      }, function (err, result) {
        if (err) {
          return callback(err);
        }

        var peers = Object.keys(result.Addrs).map(function (id) {
          var peerInfo = new PeerInfo(PeerId.createFromB58String(id));
          result.Addrs[id].forEach(function (addr) {
            peerInfo.multiaddrs.add(multiaddr(addr));
          });
          return peerInfo;
        });

        callback(null, peers);
      });
    }),
    localAddrs: promisify(function (opts, callback) {
      if (typeof opts === 'function') {
        callback = opts;
        opts = {};
      }
      send({
        path: 'swarm/addrs/local',
        qs: opts
      }, function (err, result) {
        if (err) {
          return callback(err);
        }
        callback(null, result.Strings.map(function (addr) {
          return multiaddr(addr);
        }));
      });
    })
  };
};