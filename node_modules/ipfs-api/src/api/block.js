'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var promisify = require('promisify-es6');
var Block = require('ipfs-block');
var multihash = require('multihashes');
var CID = require('cids');
var streamToValue = require('../stream-to-value');

module.exports = function (send) {
  return {
    get: promisify(function (args, opts, callback) {
      if (typeof opts === 'function') {
        callback = opts;
        opts = {};
      }

      // TODO this needs to be adjusted with the new go-ipfs http-api
      var cid = void 0;
      try {
        if (CID.isCID(args)) {
          cid = args;
          args = cid.toBaseEncodedString();
        } else if (Buffer.isBuffer(args)) {
          cid = new CID(args);
          args = cid.toBaseEncodedString();
        } else if (typeof args === 'string') {
          cid = new CID(args);
        } else {
          return callback(new Error('invalid argument'));
        }
      } catch (err) {
        return callback(err);
      }

      // Transform the response from Buffer or a Stream to a Block
      var transform = function transform(res, callback) {
        if (Buffer.isBuffer(res)) {
          callback(null, new Block(res, cid));
        } else {
          streamToValue(res, function (err, data) {
            if (err) {
              return callback(err);
            }
            callback(null, new Block(data, cid));
          });
        }
      };

      var request = {
        path: 'block/get',
        args: args,
        qs: opts
      };

      send.andTransform(request, transform, callback);
    }),
    stat: promisify(function (args, opts, callback) {
      // TODO this needs to be adjusted with the new go-ipfs http-api
      if (args && CID.isCID(args)) {
        args = multihash.toB58String(args.multihash);
      }

      if (typeof opts === 'function') {
        callback = opts;
        opts = {};
      }

      var request = {
        path: 'block/stat',
        args: args,
        qs: opts

        // Transform the response from { Key, Size } objects to { key, size } objects
      };var transform = function transform(stats, callback) {
        callback(null, {
          key: stats.Key,
          size: stats.Size
        });
      };

      send.andTransform(request, transform, callback);
    }),
    put: promisify(function (block, cid, callback) {
      // TODO this needs to be adjusted with the new go-ipfs http-api
      if (typeof cid === 'function') {
        callback = cid;
        cid = {};
      }

      if (Array.isArray(block)) {
        var err = new Error('block.put() only accepts 1 file');
        return callback(err);
      }

      if ((typeof block === 'undefined' ? 'undefined' : _typeof(block)) === 'object' && block.data) {
        block = block.data;
      }

      var request = {
        path: 'block/put',
        files: block

        // Transform the response to a Block
      };var transform = function transform(info, callback) {
        callback(null, new Block(block, new CID(info.Key)));
      };

      send.andTransform(request, transform, callback);
    })
  };
};