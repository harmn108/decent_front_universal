'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Id = require('peer-id');
var ensureMultiaddr = require('./utils').ensureMultiaddr;
var MultiaddrSet = require('./multiaddr-set');
var assert = require('assert');

// Peer represents a peer on the IPFS network

var PeerInfo = function () {
  function PeerInfo(peerId) {
    _classCallCheck(this, PeerInfo);

    assert(peerId, 'Missing peerId. Use Peer.create(cb) to create one');

    this.id = peerId;
    this.multiaddrs = new MultiaddrSet();
    this.protocols = new Set();
    this._connectedMultiaddr = undefined;
  }

  // only stores the current multiaddr being used


  _createClass(PeerInfo, [{
    key: 'connect',
    value: function connect(ma) {
      ma = ensureMultiaddr(ma);
      if (!this.multiaddrs.has(ma) && ma.toString() !== '/ipfs/' + this.id.toB58String()) {
        throw new Error('can\'t be connected to missing multiaddr from set');
      }
      this._connectedMultiaddr = ma;
    }
  }, {
    key: 'disconnect',
    value: function disconnect() {
      this._connectedMultiaddr = undefined;
    }
  }, {
    key: 'isConnected',
    value: function isConnected() {
      return this._connectedMultiaddr;
    }
  }]);

  return PeerInfo;
}();

PeerInfo.create = function (id, callback) {
  if (typeof id === 'function') {
    callback = id;
    id = null;

    Id.create(function (err, id) {
      if (err) {
        return callback(err);
      }

      callback(null, new PeerInfo(id));
    });
    return;
  }

  callback(null, new PeerInfo(id));
};

PeerInfo.isPeerInfo = function (peerInfo) {
  return Boolean((typeof peerInfo === 'undefined' ? 'undefined' : _typeof(peerInfo)) === 'object' && peerInfo.id && peerInfo.multiaddrs);
};

module.exports = PeerInfo;