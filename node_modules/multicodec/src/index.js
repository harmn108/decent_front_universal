/**
 * Implementation of the multicodec specification.
 *
 * @module multicodec
 * @example
 * const multicodec = require('multicodec')
 *
 * const prefixedProtobuf = multicodec.addPrefix('protobuf', protobufBuffer)
 * // prefixedProtobuf 0x50...
 *
 */
'use strict';

var varint = require('varint');
var codecNameToCodeVarint = require('./varint-table');
var codeToCodecName = require('./name-table');
var util = require('./util');

exports = module.exports;

/**
 * Prefix a buffer with a multicodec-packed.
 *
 * @param {string|number} multicodecStrOrCode
 * @param {Buffer} data
 * @returns {Buffer}
 */
exports.addPrefix = function (multicodecStrOrCode, data) {
  var prefix = void 0;

  if (Buffer.isBuffer(multicodecStrOrCode)) {
    prefix = util.varintBufferEncode(multicodecStrOrCode);
  } else {
    if (codecNameToCodeVarint[multicodecStrOrCode]) {
      prefix = codecNameToCodeVarint[multicodecStrOrCode];
    } else {
      throw new Error('multicodec not recognized');
    }
  }
  return Buffer.concat([prefix, data]);
};

/**
 * Decapsulate the multicodec-packed prefix from the data.
 *
 * @param {Buffer} data
 * @returns {Buffer}
 */
exports.rmPrefix = function (data) {
  varint.decode(data);
  return data.slice(varint.decode.bytes);
};

/**
 * Get the codec of the prefixed data.
 * @param {Buffer} prefixedData
 * @returns {string}
 */
exports.getCodec = function (prefixedData) {
  var code = util.varintBufferDecode(prefixedData);
  var codecName = codeToCodecName[code.toString('hex')];
  return codecName;
};